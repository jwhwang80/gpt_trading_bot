from abc import ABC, abstractmethod
from typing import Dict, Any, List

import pandas as pd


class BaseIndicator(ABC):
    """
    Base class for technical indicators calculation
    """

    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description

    @abstractmethod
    def calculate(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Calculate the indicator from the dataframe.

        Args:
            df (pd.DataFrame): Dataframe containing OHLCV data

        Returns:
            pd.DataFrame: Dataframe with calculated indicators added
        """
        pass

    @abstractmethod
    def interpret(self, row: pd.Series) -> Dict[str, Any]:
        """
        Interpret the current value of the indicator.

        Args:
            row (pd.Series): Data series containing indicator values

        Returns:
            Dict[str, Any]: Indicator interpretation results
        """
        pass

    def get_columns(self) -> List[str]:
        """
        Returns the list of column names generated by this indicator.

        Returns:
            List[str]: List of column names
        """
        return []

    def get_info(self) -> Dict[str, str]:
        """
        Returns information about the indicator.

        Returns:
            Dict[str, str]: Indicator information
        """
        return {
            'name': self.name,
            'description': self.description
        }
